#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
var models = require('../models');
var pg = require('pg');
var pool = new pg.Pool(models.config);
var db = require('../mechanisms/database.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

pool.connect(function(err, client, done) { 
  // Start Server
	//client.query('SELECT * FROM room', function(err, result) {
	//	console.log(err);
	//	console.log(result);
	//});
	//db.createTables(client)
	//.then(function(success) {
		//console.log("Succ");
		//client.query("SELECT * from accounts", function(err, result) {
			//console.log(err);
			//console.log(result);
		//});
		//client.query("INSERT INTO accounts (email) VALUES ('emailTest')", function(err, result) {
			//console.log(err);
			//console.log(result);
		//})
	//}).catch(function(err) {
	//	console.log(err);
	//});
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
});

pool.on('error', function(err, client) {
	console.log('idle client error', err.message, err.stack);
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
